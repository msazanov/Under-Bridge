// services/localService.js

const { haiku } = require('../utils/name-generator');
const db = require('../repositories/db');
const { Markup } = require('telegraf');
const { showLocalOverview } = require('./menu');
const logger = require('../utils/logger');

async function createLocal(ctx, localName, motd) {
  const telegramId = ctx.from.id;
  logger.log(`[createLocal] –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId}. –ù–∞–∑–≤–∞–Ω–∏–µ: ${localName}`);

  try {
    const user = await db.getUserByTelegramId(telegramId);
    if (!user) {
      logger.log(`[createLocal] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      await ctx.reply('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.');
      return;
    }
    logger.log(`[createLocal] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é IP-—Å–µ—Ç—å
    let ipNetwork;
    let isUnique = false;
    while (!isUnique) {
      ipNetwork = `10.${Math.floor(Math.random() * 256)}.${Math.floor(Math.random() * 256)}.0/24`;
      const exists = await db.isIpNetworkExists(ipNetwork);
      if (!exists) {
        isUnique = true;
      }
    }
    logger.log(`[createLocal] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω IP-—Å–µ—Ç—å: ${ipNetwork}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏
    let uniqueName = localName;
    let nameExists = await db.isLocalNameExists(uniqueName);
    if (nameExists) {
      uniqueName = `${localName}-${Math.floor(Math.random() * 1000)}`;
      logger.log(`[createLocal] –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${uniqueName}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª–∫—É
    const local = await db.addLocal(user.id, uniqueName, ipNetwork);
    const localId = local.id;
    logger.log(`[createLocal] –õ–æ–∫–∞–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID ${localId}`);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∑–æ—Ä–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–∫–∞–ª–∫–∏ —Å motd
    await showLocalOverview(ctx, localId, motd);
    logger.log(`[createLocal] –û–±–∑–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞–ª–∫–∏ ID ${localId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
  } catch (error) {
    logger.error(`[createLocal] –û—à–∏–±–∫–∞: ${error.message}`);
    const errorMessage = `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞–ª–∫–∏: ${error.message}`;
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

async function createLocalUser(ctx, username, motd) {
  const localId = ctx.session.localId;
  const telegramId = ctx.from.id;
  logger.log(`[createLocalUser] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}" –≤ –ª–æ–∫–∞–ª–∫–µ ID ${localId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId}`);

  try {
    const local = await db.getLocalByIdAndOwner(localId, telegramId);
    if (!local) {
      logger.log(`[createLocalUser] –õ–æ–∫–∞–ª–∫–∞ ID ${localId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
      await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
      return;
    }
    logger.log(`[createLocalUser] –õ–æ–∫–∞–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${local.name} (${local.ip_network})`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π IP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const baseIP = local.ip_network.split('.').slice(0, 3).join('.') + '.';
    const usedIPs = await db.getUsedIPs(localId);
    logger.log(`[createLocalUser] –ó–∞–Ω—è—Ç—ã–µ IP: ${usedIPs.join(', ')}`);

    let userIP = null;
    for (let i = 2; i < 255; i++) {
      const potentialIP = baseIP + i;
      if (!usedIPs.includes(potentialIP)) {
        userIP = potentialIP;
        break;
      }
    }

    if (!userIP) {
      logger.log(`[createLocalUser] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ –ª–æ–∫–∞–ª–∫–µ ID ${localId}`);
      await ctx.answerCbQuery('‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ —ç—Ç–æ–π –ª–æ–∫–∞–ª–∫–µ.', { show_alert: true });
      return;
    }
    logger.log(`[createLocalUser] –ü—Ä–∏—Å–≤–æ–µ–Ω IP ${userIP} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "${username}"`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usernameExists = await db.isUsernameExists(localId, username);
    if (usernameExists) {
      logger.log(`[createLocalUser] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª–æ–∫–∞–ª–∫–µ ID ${localId}`);
      const errorMsg = `‚ùó *–î–∞–Ω–Ω–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ.*\n`;
      const messageText = `${errorMsg}**–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** üë§

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'generate_random_username')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${localId}`)],
      ]);

      if (ctx.callbackQuery && ctx.callbackQuery.message) {
        logger.log(`[createLocalUser] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        await ctx.editMessageText(messageText, {
          parse_mode: 'Markdown',
          ...keyboard,
        });
      } else {
        logger.log(`[createLocalUser] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        await ctx.reply(messageText, {
          parse_mode: 'Markdown',
          ...keyboard,
        });
      }

      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.addLocalUser(localId, username, userIP);
    logger.log(`[createLocalUser] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª–∫—É ID ${localId} —Å IP ${userIP}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π QR-–∫–æ–¥ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
    const qrCodeData = `üîó VPN Config for ${username}`;
    logger.log(`[createLocalUser] QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}": ${qrCodeData}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∑–æ—Ä–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–∫–∞–ª–∫–∏ —Å motd
    await showLocalOverview(ctx, localId, motd);
    logger.log(`[createLocalUser] –û–±–∑–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞–ª–∫–∏ ID ${localId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);
  } catch (error) {
    logger.error(`[createLocalUser] –û—à–∏–±–∫–∞: ${error.message}`);

    if (error.message.includes('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      const localId = ctx.session.localId;
      const errorMsg = `‚ùó *–î–∞–Ω–Ω–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ.*\n`;
      const messageText = `${errorMsg}**–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** üë§

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'generate_random_username')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${localId}`)],
      ]);

      if (ctx.callbackQuery && ctx.callbackQuery.message) {
        logger.log(`[createLocalUser] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        await ctx.editMessageText(messageText, {
          parse_mode: 'Markdown',
          ...keyboard,
        });
      } else {
        logger.log(`[createLocalUser] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        await ctx.reply(messageText, {
          parse_mode: 'Markdown',
          ...keyboard,
        });
      }

      return;
    }

    const errorMessage = `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`;
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

module.exports = {
  createLocal,
  createLocalUser,
};
