// bot.js
require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const db = require('./modules/db'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å db
const { haiku } = require('./modules/name-generator');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(session());

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 * @param {Telegraf.Context} ctx
 * @param {boolean} setMainMenuMessageId - —Ñ–ª–∞–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ mainMenuMessageId
 */
async function showMainMenu(ctx, setMainMenuMessageId = false) {
  const telegramId = ctx.from.id;
  console.log(`[showMainMenu] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤—ã–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. setMainMenuMessageId: ${setMainMenuMessageId}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await db.getUserByTelegramId(telegramId);
    if (!user) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      const { first_name, last_name, username } = ctx.from;
      console.log(`[showMainMenu] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${first_name} ${last_name}, Username: ${username}`);
      user = await db.addUser(telegramId, first_name, last_name, username);
      await ctx.reply(`üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${first_name}! üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.`);
      console.log(`[showMainMenu] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ID ${user.id}, –ë–∞–ª–∞–Ω—Å ${user.balance}`);
    } else {
      console.log(`[showMainMenu] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID ${user.id}, –ë–∞–ª–∞–Ω—Å ${user.balance}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const locals = await db.getLocalsByOwnerId(user.id);
    const localsCount = locals.length;
    console.log(`[showMainMenu] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${user.id}: ${localsCount}`);

    const messageText = `‚ú® **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** ‚ú®

üí∞ *–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* ${user.balance} —Ä—É–±–ª–µ–π
üìÇ *–í–∞—à–∏ –ª–æ–∫–∞–ª–∫–∏:* ${localsCount}

üîΩ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìÅ –ú–æ–∏ –õ–æ–∫–∞–ª–∫–∏', 'my_locals')],
      [Markup.button.callback('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'top_up')],
    ]);

    if (setMainMenuMessageId) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id –∫–∞–∫ mainMenuMessageId
      console.log(`[showMainMenu] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
      const sentMessage = await ctx.reply(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      ctx.session.mainMenuMessageId = sentMessage.message_id;
      console.log(`[showMainMenu] mainMenuMessageId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${sentMessage.message_id}`);
    } else {
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      if (ctx.session.mainMenuMessageId) {
        console.log(`[showMainMenu] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–µ ID ${ctx.session.mainMenuMessageId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId}`);
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          ctx.session.mainMenuMessageId,
          null,
          messageText,
          { parse_mode: 'Markdown', ...keyboard }
        );
      }
      else {
        // –ï—Å–ª–∏ mainMenuMessageId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log(`[showMainMenu] mainMenuMessageId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
        const sentMessage = await ctx.reply(messageText, {
          parse_mode: 'Markdown',
          ...keyboard,
        });
        ctx.session.mainMenuMessageId = sentMessage.message_id;
        console.log(`[showMainMenu] mainMenuMessageId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${sentMessage.message_id}`);
      }
    }
  } catch (error) {
    console.error(`[showMainMenu] –û—à–∏–±–∫–∞: ${error.message}`);
    const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Telegraf.Context} ctx
 * @param {boolean} setMainMenuMessageId - —Ñ–ª–∞–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ mainMenuMessageId
 */
async function showMyLocals(ctx, setMainMenuMessageId = false) {
  const telegramId = ctx.from.id;
  console.log(`[showMyLocals] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–æ–∫. setMainMenuMessageId: ${setMainMenuMessageId}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.getUserByTelegramId(telegramId);
    if (!user) {
      console.log(`[showMyLocals] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      await ctx.reply('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.');
      return;
    }
    console.log(`[showMyLocals] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const locals = await db.getLocalsByOwnerId(user.id);
    console.log(`[showMyLocals] –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${user.id}: ${locals.length}`);

    if (locals.length === 0) {
      const messageText = 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–æ–∫–∞–ª–æ–∫.';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –õ–æ–∫–∞–ª–∫—É', 'new_local')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')],
      ]);
      console.log(`[showMyLocals] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ª–æ–∫–∞–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);

      if (setMainMenuMessageId && ctx.session.mainMenuMessageId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        console.log(`[showMyLocals] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–µ ID ${ctx.session.mainMenuMessageId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId}`);
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          ctx.session.mainMenuMessageId,
          null,
          messageText,
          { parse_mode: 'Markdown', ...keyboard }
        );
      }
      else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log(`[showMyLocals] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–æ–∫–∞–ª–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
        const sentMessage = await ctx.reply(messageText, {
          parse_mode: 'Markdown',
          ...keyboard,
        });
        // –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π message_id
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞–ª–∫–∏
      const keyboardButtons = [];
      for (const local of locals) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–æ–∫–∞–ª–∫–µ
        const localUsers = await db.getLocalUsers(local.id);
        const usersCount = localUsers.length;
        keyboardButtons.push([
          Markup.button.callback(
            `üìÅ ${local.name} \`${local.ip_network}\` [${usersCount}/254]`,
            `local_${local.id}`
          ),
        ]);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –õ–æ–∫–∞–ª–∫—É" –∏ "–ù–∞–∑–∞–¥"
      keyboardButtons.push([
        Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –õ–æ–∫–∞–ª–∫—É', 'new_local'),
      ]);
      keyboardButtons.push([
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'),
      ]);

      const listMessage = 'üìÇ **–í–∞—à–∏ –ª–æ–∫–∞–ª–∫–∏:**';
      console.log(`[showMyLocals] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);

      if (setMainMenuMessageId && ctx.session.mainMenuMessageId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        console.log(`[showMyLocals] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–µ ID ${ctx.session.mainMenuMessageId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId}`);
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          ctx.session.mainMenuMessageId,
          null,
          listMessage,
          { parse_mode: 'Markdown', ...Markup.inlineKeyboard(keyboardButtons) }
        );
      }
      else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log(`[showMyLocals] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ–∫–∞–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
        const sentMessage = await ctx.reply(listMessage, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard(keyboardButtons),
        });
        // –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π message_id
      }
    }
  } catch (error) {
    console.error(`[showMyLocals] –û—à–∏–±–∫–∞: ${error.message}`);
    const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ª–æ–∫–∞–ª–æ–∫.';
    await ctx.answerCbQuery(errorMessage, { show_alert: true });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  const telegramId = ctx.from.id;
  console.log(`[Start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤—ã–∑–≤–∞–ª /start`);
  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session = {};
    console.log(`[Start] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ`);
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await showMainMenu(ctx, true);
  } catch (error) {
    console.error(`[Start] –û—à–∏–±–∫–∞: ${error.message}`);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏
 * @param {Telegraf.Context} ctx
 * @param {string} localName - –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏
 * @param {string} motd - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
 */
async function createLocal(ctx, localName, motd) {
  const telegramId = ctx.from.id;
  console.log(`[createLocal] –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId}. –ù–∞–∑–≤–∞–Ω–∏–µ: ${localName}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.getUserByTelegramId(telegramId);
    if (!user) {
      console.log(`[createLocal] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      await ctx.reply('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.');
      return;
    }
    console.log(`[createLocal] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å –¥–ª—è –ª–æ–∫–∞–ª–∫–∏
    let ipNetwork;
    let isUnique = false;
    while (!isUnique) {
      ipNetwork = `10.${Math.floor(Math.random() * 256)}.${Math.floor(Math.random() * 256)}.0/24`;
      const exists = await db.isIpNetworkExists(ipNetwork);
      if (!exists) {
        isUnique = true;
      }
    }
    console.log(`[createLocal] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω IP-—Å–µ—Ç—å: ${ipNetwork}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏
    let uniqueName = localName;
    let nameExists = await db.isLocalNameExists(uniqueName);
    if (nameExists) {
      uniqueName = `${localName}-${Math.floor(Math.random() * 1000)}`;
      console.log(`[createLocal] –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${uniqueName}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
    const local = await db.addLocal(user.id, uniqueName, ipNetwork);
    const localId = local.id;
    console.log(`[createLocal] –õ–æ–∫–∞–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID ${localId}`);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∑–æ—Ä–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–∫–∞–ª–∫–∏ —Å motd
    await showLocalOverview(ctx, localId, motd);
    console.log(`[createLocal] –û–±–∑–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞–ª–∫–∏ ID ${localId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
  } catch (error) {
    console.error(`[createLocal] –û—à–∏–±–∫–∞: ${error.message}`);
    const errorMessage = `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞–ª–∫–∏: ${error.message}`;
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª–∫–µ
 * @param {Telegraf.Context} ctx
 * @param {string} username - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} motd - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
 */
async function createLocalUser(ctx, username, motd) {
  const localId = ctx.session.localId;
  const telegramId = ctx.from.id;
  console.log(`[createLocalUser] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}" –≤ –ª–æ–∫–∞–ª–∫–µ ID ${localId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId}`);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞–ª–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const local = await db.getLocalByIdAndOwner(localId, telegramId);
    if (!local) {
      console.log(`[createLocalUser] –õ–æ–∫–∞–ª–∫–∞ ID ${localId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
      await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
      return;
    }
    console.log(`[createLocalUser] –õ–æ–∫–∞–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${local.name} (${local.ip_network})`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º IP –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const ipParts = local.ip_network.split('.');
    const baseIP = `${ipParts[0]}.${ipParts[1]}.${ipParts[2]}.`;
    console.log(`[createLocalUser] –ë–∞–∑–æ–≤—ã–π IP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${baseIP}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö IP
    const usedIPs = await db.getUsedIPs(localId);
    console.log(`[createLocalUser] –ó–∞–Ω—è—Ç—ã–µ IP: ${usedIPs.join(', ')}`);

    // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π IP
    let userIP = null;
    for (let i = 2; i < 255; i++) {
      const potentialIP = baseIP + i;
      if (!usedIPs.includes(potentialIP)) {
        userIP = potentialIP;
        break;
      }
    }

    if (!userIP) {
      console.log(`[createLocalUser] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ –ª–æ–∫–∞–ª–∫–µ ID ${localId}`);
      await ctx.answerCbQuery('‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ —ç—Ç–æ–π –ª–æ–∫–∞–ª–∫–µ.', { show_alert: true });
      return;
    }
    console.log(`[createLocalUser] –ü—Ä–∏—Å–≤–æ–µ–Ω IP ${userIP} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "${username}"`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª–∫–µ
    const usernameExists = await db.isUsernameExists(localId, username);
    if (usernameExists) {
      console.log(`[createLocalUser] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª–æ–∫–∞–ª–∫–µ ID ${localId}`);
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
      const errorMsg = `‚ùó *–î–∞–Ω–Ω–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ.*\n`;
      const messageText = `${errorMsg}**–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** üë§

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'generate_random_username')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${localId}`)],
      ]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callbackQuery.message
      if (ctx.callbackQuery && ctx.callbackQuery.message) {
        console.log(`[createLocalUser] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        await ctx.editMessageText(messageText, {
          parse_mode: 'Markdown',
          ...keyboard,
        });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log(`[createLocalUser] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        await ctx.reply(messageText, {
          parse_mode: 'Markdown',
          ...keyboard,
        });
      }

      // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.addLocalUser(localId, username, userIP);
    console.log(`[createLocalUser] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª–∫—É ID ${localId} —Å IP ${userIP}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π QR-–∫–æ–¥ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
    const qrCodeData = `üîó VPN Config for ${username}`;
    console.log(`[createLocalUser] QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}": ${qrCodeData}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∑–æ—Ä–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–∫–∞–ª–∫–∏ —Å motd
    await showLocalOverview(ctx, localId, motd);
    console.log(`[createLocalUser] –û–±–∑–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞–ª–∫–∏ ID ${localId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);
  } catch (error) {
    console.error(`[createLocalUser] –û—à–∏–±–∫–∞: ${error.message}`);

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if (error.message.includes('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    const errorMessage = `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`;
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–∑–æ—Ä–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–∫–∞–ª–∫–∏
 * @param {Telegraf.Context} ctx
 * @param {number} localId - ID –ª–æ–∫–∞–ª–∫–∏
 * @param {string} motd - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
 */
async function showLocalOverview(ctx, localId, motd = '') {
  const telegramId = ctx.from.id;
  console.log(`[showLocalOverview] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –ª–æ–∫–∞–ª–∫–∏ ID ${localId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∫—É
    const local = await db.getLocalByIdAndOwner(localId, telegramId);
    if (!local) {
      console.log(`[showLocalOverview] –õ–æ–∫–∞–ª–∫–∞ ID ${localId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
      await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
      return;
    }

    console.log(`[showLocalOverview] –õ–æ–∫–∞–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${local.name} (${local.ip_network})`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ª–æ–∫–∞–ª–∫–∏
    const localUsers = await db.getLocalUsers(localId);
    console.log(`[showLocalOverview] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–æ–∫–∞–ª–∫–µ ID ${localId}: ${localUsers.length}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let usersListText = '';
    if (localUsers.length > 0) {
      usersListText = '\n**üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n';
      localUsers.forEach((user) => {
        usersListText += `- ${user.username}: \`${user.ip_address}\`\n`;
      });
    } else {
      usersListText = '\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageText = `${motd}**üìÅ ${local.name}**
üåê *IP —Å–µ—Ç—å:* \`${local.ip_network}\`${usersListText}

üîΩ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É"
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', `add_user_${local.id}`)],
      [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É', `delete_local_${local.id}`)],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'my_locals')],
    ]);

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª callback, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (ctx.callbackQuery && ctx.callbackQuery.message) {
      const currentMessageId = ctx.callbackQuery.message.message_id;
      console.log(`[showLocalOverview] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ID ${currentMessageId} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);
      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
    } else if (ctx.session.mainMenuMessageId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç callbackQuery, –Ω–æ –µ—Å—Ç—å mainMenuMessageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
      console.log(`[showLocalOverview] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–µ ID ${ctx.session.mainMenuMessageId} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        ctx.session.mainMenuMessageId,
        null,
        messageText,
        { parse_mode: 'Markdown', ...keyboard }
      );
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç callbackQuery –∏ mainMenuMessageId, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log(`[showLocalOverview] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);
      const sentMessage = await ctx.reply(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π message_id
    }
  } catch (error) {
    console.error(`[showLocalOverview] –û—à–∏–±–∫–∞: ${error.message}`);
    const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–æ–∫–∞–ª–∫–∏.';
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ —Å —Ç–æ—á–Ω—ã–º–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏
 * –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Å delete_local_{id}
 */
bot.action(/^confirm_delete_local_(\d+)$/, async (ctx) => {
  const localId = ctx.match[1];
  const telegramId = ctx.from.id;
  console.log(`[Action: confirm_delete_local_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.getUserByTelegramId(telegramId);
    if (!user) {
      console.log(`[confirm_delete_local_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      await ctx.answerCbQuery('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', { show_alert: true });
      return;
    }

    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª–∫—É
    await db.deleteLocal(localId, user.id);
    console.log(`[confirm_delete_local_${localId}] –õ–æ–∫–∞–ª–∫–∞ ID ${localId} —É–¥–∞–ª–µ–Ω–∞.`);

    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await ctx.editMessageText('üóëÔ∏è –õ–æ–∫–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', { parse_mode: 'Markdown' });
    console.log(`[confirm_delete_local_${localId}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–æ–∫
    await showMyLocals(ctx, true);
    console.log(`[confirm_delete_local_${localId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–æ–∫.`);
  } catch (error) {
    console.error(`[confirm_delete_local_${localId}] –û—à–∏–±–∫–∞: ${error.message}`);
    const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    await ctx.answerCbQuery(errorMessage, { show_alert: true });
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É"
 * –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ confirm_delete_local_{id}, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
 */
bot.action(/^delete_local_(\d+)$/, async (ctx) => {
  const localId = ctx.match[1];
  const telegramId = ctx.from.id;
  console.log(`[Action: delete_local_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É" –¥–ª—è –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);

  try {
    const confirmationText = `üóëÔ∏è *–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏?* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
    console.log(`[Action: delete_local_${localId}] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.`);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_local_${localId}`)],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${localId}`)],
    ]);

    await ctx.editMessageText(confirmationText, {
      parse_mode: 'Markdown',
      ...keyboard,
    });
    console.log(`[Action: delete_local_${localId}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
  } catch (error) {
    console.error(`[Action: delete_local_${localId}] –û—à–∏–±–∫–∞: ${error.message}`);
    const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    await ctx.answerCbQuery(errorMessage, { show_alert: true });
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª–∫–µ
 */
bot.action(/^add_user_(\d+)$/, async (ctx) => {
  const localId = ctx.match[1];
  const telegramId = ctx.from.id;
  console.log(`[Action: add_user_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –¥–ª—è –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞–ª–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const local = await db.getLocalByIdAndOwner(localId, telegramId);
    if (!local) {
      console.log(`[Action: add_user_${localId}] –õ–æ–∫–∞–ª–∫–∞ ID ${localId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
      await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'awaiting_username';
    ctx.session.localId = localId;
    console.log(`[Action: add_user_${localId}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: awaiting_username`);

    const messageText = `üë§ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è.`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'generate_random_username')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${localId}`)],
    ]);

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      ...keyboard,
    });
    console.log(`[Action: add_user_${localId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
  } catch (error) {
    console.error(`[Action: add_user_${localId}] –û—à–∏–±–∫–∞: ${error.message}`);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
bot.action('generate_random_username', async (ctx) => {
  const telegramId = ctx.from.id;
  console.log(`[Action: generate_random_username] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

  try {
    const localId = ctx.session.localId;
    if (!localId) {
      throw new Error('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const username = haiku();
    console.log(`[Action: generate_random_username] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ motd
    await createLocalUser(ctx, username, `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
    console.log(`[Action: generate_random_username] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = null;
    ctx.session.localId = null;
    console.log(`[Action: generate_random_username] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);
  } catch (error) {
    console.error(`[Action: generate_random_username] –û—à–∏–±–∫–∞: ${error.message}`);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
bot.on('text', async (ctx) => {
  const telegramId = ctx.from.id;
  const userText = ctx.message.text.trim();
  console.log(`[on:text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç: "${userText}"`);
  
  try {
    if (ctx.session.state === 'awaiting_local_name') {
      const localName = userText;
      console.log(`[on:text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏: "${localName}"`);

      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª–∫—É —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      await createLocal(ctx, localName, `üéâ –õ–æ–∫–∞–ª–∫–∞ "${localName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
      console.log(`[on:text] –õ–æ–∫–∞–ª–∫–∞ "${localName}" —Å–æ–∑–¥–∞–Ω–∞.`);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
        console.log(`[on:text] –°–æ–æ–±—â–µ–Ω–∏–µ ID ${ctx.message.message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —É–¥–∞–ª–µ–Ω–æ.`);
      } catch (error) {
        console.error(`[on:text] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      ctx.session.state = null;
      console.log(`[on:text] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);
    } else if (ctx.session.state === 'awaiting_username') {
      const username = userText;
      console.log(`[on:text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤–≤–æ–¥–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${username}"`);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª–∫–µ
      await createLocalUser(ctx, username, `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
      console.log(`[on:text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —Å–æ–∑–¥–∞–Ω –≤ –ª–æ–∫–∞–ª–∫–µ.`);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
        console.log(`[on:text] –°–æ–æ–±—â–µ–Ω–∏–µ ID ${ctx.message.message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —É–¥–∞–ª–µ–Ω–æ.`);
      } catch (error) {
        console.error(`[on:text] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      ctx.session.state = null;
      ctx.session.localId = null;
      console.log(`[on:text] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);
    }
  } catch (error) {
    console.error(`[on:text] –û—à–∏–±–∫–∞: ${error.message}`);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –õ–æ–∫–∞–ª–∫–∞" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ú–æ–∏ –õ–æ–∫–∞–ª–∫–∏"
 */
bot.action('new_local', async (ctx) => {
  const telegramId = ctx.from.id;
  console.log(`[Action: new_local] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –õ–æ–∫–∞–ª–∫—É"`);

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'awaiting_local_name';
    console.log(`[Action: new_local] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: awaiting_local_name`);

    const messageText = `üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∫–∏**
    
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –°–æ–∑–¥–∞—Ç—å!", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –°–æ–∑–¥–∞—Ç—å!', 'generate_random_name')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')],
    ]);

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      ...keyboard,
    });
    console.log(`[Action: new_local] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∫–∏.`);
  } catch (error) {
    console.error(`[Action: new_local] –û—à–∏–±–∫–∞: ${error.message}`);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏
 */
bot.action('generate_random_name', async (ctx) => {
  const telegramId = ctx.from.id;
  console.log(`[Action: generate_random_name] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å!" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏.`);

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    const localName = haiku();
    console.log(`[Action: generate_random_name] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏: "${localName}"`);

    // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª–∫—É
    await createLocal(ctx, localName, `üéâ –õ–æ–∫–∞–ª–∫–∞ "${localName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
    console.log(`[Action: generate_random_name] –õ–æ–∫–∞–ª–∫–∞ "${localName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = null;
    console.log(`[Action: generate_random_name] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);
  } catch (error) {
    console.error(`[Action: generate_random_name] –û—à–∏–±–∫–∞: ${error.message}`);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏.');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –õ–æ–∫–∞–ª–∫–∏"
 */
bot.action('my_locals', async (ctx) => {
  const telegramId = ctx.from.id;
  console.log(`[Action: my_locals] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –õ–æ–∫–∞–ª–∫–∏"`);
  await showMyLocals(ctx, true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setMainMenuMessageId –≤ true –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
 */
bot.action('top_up', async (ctx) => {
  const telegramId = ctx.from.id;
  console.log(`[Action: top_up] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"`);

  try {
    await ctx.answerCbQuery('üí≥ –§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { show_alert: true });
    console.log(`[Action: top_up] –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
  } catch (error) {
    console.error(`[Action: top_up] –û—à–∏–±–∫–∞: ${error.message}`);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
 */
bot.action('back_to_main', async (ctx) => {
  const telegramId = ctx.from.id;
  console.log(`[Action: back_to_main] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"`);

  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = null;
    ctx.session.currentLocalId = null;
    console.log(`[Action: back_to_main] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await showMainMenu(ctx, false);
    console.log(`[Action: back_to_main] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
  } catch (error) {
    console.error(`[Action: back_to_main] –û—à–∏–±–∫–∞: ${error.message}`);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞–ª–∫–∏
 */
bot.action(/^local_(\d+)$/, async (ctx) => {
  const localId = ctx.match[1];
  const telegramId = ctx.from.id;
  console.log(`[Action: local_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤—ã–±—Ä–∞–ª –ª–æ–∫–∞–ª–∫—É ID ${localId}`);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª–∫—É –≤ —Å–µ—Å—Å–∏–∏
  ctx.session.currentLocalId = localId;
  console.log(`[Action: local_${localId}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentLocalId: ${localId}`);

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∑–æ—Ä–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–∫–∞–ª–∫–∏ –±–µ–∑ motd
  await showLocalOverview(ctx, localId);
  console.log(`[Action: local_${localId}] –û–±–∑–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: ${err.message}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
});

// –ì—Ä–µ–π—Å—Ñ—É–ª-—à–∞—Ç–¥–∞—É–Ω
process.once('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞.');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞.');
  bot.stop('SIGTERM');
});
