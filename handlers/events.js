// handlers/events.js

const { createLocal, createLocalUser } = require('../services/localService');
const { showLocalOverview } = require('../services/menu');
const logger = require('../utils/logger');

function registerEvents(bot) {
  bot.on('text', async (ctx) => {
    const telegramId = ctx.from.id;
    const userText = ctx.message.text.trim();
    logger.log(`[on:text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç: "${userText}"`);

    try {
      if (ctx.session.state === 'awaiting_local_name') {
        const localName = userText;
        logger.log(`[on:text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏: "${localName}"`);

        await createLocal(ctx, localName, `üéâ –õ–æ–∫–∞–ª–∫–∞ "${localName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
        logger.log(`[on:text] –õ–æ–∫–∞–ª–∫–∞ "${localName}" —Å–æ–∑–¥–∞–Ω–∞.`);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
          logger.log(`[on:text] –°–æ–æ–±—â–µ–Ω–∏–µ ID ${ctx.message.message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —É–¥–∞–ª–µ–Ω–æ.`);
        } catch (error) {
          logger.error(`[on:text] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ctx.session.state = null;
        logger.log(`[on:text] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);
      } else if (ctx.session.state === 'awaiting_username') {
        const username = userText;
        logger.log(`[on:text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤–≤–æ–¥–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${username}"`);

        await createLocalUser(ctx, username, `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
        logger.log(`[on:text] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —Å–æ–∑–¥–∞–Ω –≤ –ª–æ–∫–∞–ª–∫–µ.`);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
          logger.log(`[on:text] –°–æ–æ–±—â–µ–Ω–∏–µ ID ${ctx.message.message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —É–¥–∞–ª–µ–Ω–æ.`);
        } catch (error) {
          logger.error(`[on:text] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ctx.session.state = null;
        ctx.session.localId = null;
        logger.log(`[on:text] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);
      }
    } catch (error) {
      logger.error(`[on:text] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}

module.exports = registerEvents;
