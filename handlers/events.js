/**
 * File: handlers/events.js
 * Description: Handles text events and other generic events for the Telegram bot.
 */

const { createLocal, createLocalUser } = require('../services/localService');
const { showLocalOverview } = require('../services/menu');
const logger = require('../utils/logger');
const db = require('../repositories/db');
const { Markup } = require('telegraf');

function registerEvents(bot) {
  bot.on('text', async (ctx) => {
    const telegramId = ctx.from.id;
    const userText = ctx.message.text.trim();
    logger.info(`[on:text] User ID: ${telegramId} entered text: "${userText}"`);

    try {
      if (ctx.session.state === 'awaiting_local_name') {
        const localName = userText;
        logger.info(`[on:text] User ID: ${telegramId} is entering local name: "${localName}"`);

        await createLocal(ctx, localName, `üéâ –õ–æ–∫–∞–ª–∫–∞ "${localName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
        logger.info(`[on:text] Local "${localName}" created.`);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
          logger.info(`[on:text] Deleted message ID ${ctx.message.message_id} from user ID ${telegramId}.`);
        } catch (error) {
          logger.error(`[on:text] Error deleting user message: ${error.message}`);
        }

        ctx.session.state = null;
        logger.info(`[on:text] Session state reset for user ID ${telegramId}.`);
      } else if (ctx.session.state === 'awaiting_username') {
        const username = userText;
        logger.info(`[on:text] User ID: ${telegramId} is entering username: "${username}"`);

        await createLocalUser(ctx, username, `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
        logger.info(`[on:text] User "${username}" created in local.`);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
          logger.info(`[on:text] Deleted message ID ${ctx.message.message_id} from user ID ${telegramId}.`);
        } catch (error) {
          logger.error(`[on:text] Error deleting user message: ${error.message}`);
        }

        ctx.session.state = null;
        ctx.session.localId = null;
        logger.info(`[on:text] Session state reset for user ID ${telegramId}.`);
      } else if (ctx.session.state === 'awaiting_new_username') {
        const newUsername = userText;
        const userIdToRename = ctx.session.userIdToRename;
        const localId = ctx.session.localId;
        logger.info(`[on:text] User ID: ${telegramId} is renaming user ID ${userIdToRename} to "${newUsername}"`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞
        const localUser = await db.getLocalUserById(userIdToRename);
        if (!localUser) {
          logger.info(`[on:text] Local user ID ${userIdToRename} not found.`);
          await ctx.reply('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          return;
        }

        const local = await db.getLocalByIdAndOwner(localId, telegramId);
        if (!local) {
          logger.info(`[on:text] Access denied for user ID ${telegramId}`);
          await ctx.reply('‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        const usernameExists = await db.isUsernameExists(local.id, newUsername);
        if (usernameExists) {
          await ctx.reply('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.');
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.updateLocalUserUsername(userIdToRename, newUsername);
        logger.info(`[on:text] User ID ${userIdToRename} renamed to "${newUsername}"`);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
          logger.info(`[on:text] Deleted message ID ${ctx.message.message_id} from user ID ${telegramId}.`);
        } catch (error) {
          logger.error(`[on:text] Error deleting user message: ${error.message}`);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        ctx.session.state = null;
        ctx.session.userIdToRename = null;
        ctx.session.localId = null;

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await showLocalOverview(ctx, local.id);
      }
    } catch (error) {
      logger.error(`[on:text] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}

module.exports = registerEvents;
