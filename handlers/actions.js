// handlers/actions.js

const { showMyLocals, showMainMenu, showLocalOverview } = require('../services/menu');
const { haiku } = require('../utils/name-generator');
const db = require('../repositories/db'); 
const logger = require('../utils/logger');
const { Markup } = require('telegraf');
const { createLocal, createLocalUser } = require('../services/localService');

function registerActions(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏
  bot.action(/^confirm_delete_local_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.log(`[Action: confirm_delete_local_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);

    try {
      const user = await db.getUserByTelegramId(telegramId);
      if (!user) {
        logger.log(`[confirm_delete_local_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        await ctx.answerCbQuery('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', { show_alert: true });
        return;
      }

      await db.deleteLocal(localId, user.id);
      logger.log(`[confirm_delete_local_${localId}] –õ–æ–∫–∞–ª–∫–∞ ID ${localId} —É–¥–∞–ª–µ–Ω–∞.`);

      await ctx.editMessageText('üóëÔ∏è –õ–æ–∫–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', { parse_mode: 'Markdown' });
      logger.log(`[confirm_delete_local_${localId}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);

      await showMyLocals(ctx, true);
      logger.log(`[confirm_delete_local_${localId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–æ–∫.`);
    } catch (error) {
      logger.error(`[confirm_delete_local_${localId}] –û—à–∏–±–∫–∞: ${error.message}`);
      const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É"
  bot.action(/^delete_local_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.log(`[Action: delete_local_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É" –¥–ª—è –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);

    try {
      const confirmationText = `üóëÔ∏è *–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏?* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
      logger.log(`[Action: delete_local_${localId}] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.`);

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_local_${localId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${localId}`)],
      ]);

      await ctx.editMessageText(confirmationText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      logger.log(`[Action: delete_local_${localId}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
    } catch (error) {
      logger.error(`[Action: delete_local_${localId}] –û—à–∏–±–∫–∞: ${error.message}`);
      const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  bot.action(/^add_user_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.log(`[Action: add_user_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –¥–ª—è –ª–æ–∫–∞–ª–∫–∏ ID ${localId}`);

    try {
      const local = await db.getLocalByIdAndOwner(localId, telegramId);
      if (!local) {
        logger.log(`[Action: add_user_${localId}] –õ–æ–∫–∞–ª–∫–∞ ID ${localId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
        await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
        return;
      }

      ctx.session.state = 'awaiting_username';
      ctx.session.localId = localId;
      logger.log(`[Action: add_user_${localId}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: awaiting_username`);

      const messageText = `üë§ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
      
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'generate_random_username')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${localId}`)],
      ]);

      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      logger.log(`[Action: add_user_${localId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
    } catch (error) {
      logger.error(`[Action: add_user_${localId}] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action('generate_random_username', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.log(`[Action: generate_random_username] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

    try {
      const localId = ctx.session.localId;
      if (!localId) {
        throw new Error('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.');
      }

      const username = haiku();
      logger.log(`[Action: generate_random_username] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

      await createLocalUser(ctx, username, `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
      logger.log(`[Action: generate_random_username] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);

      ctx.session.state = null;
      ctx.session.localId = null;
      logger.log(`[Action: generate_random_username] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);
    } catch (error) {
      logger.error(`[Action: generate_random_username] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –õ–æ–∫–∞–ª–∫–∏"
  bot.action('my_locals', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.log(`[Action: my_locals] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –õ–æ–∫–∞–ª–∫–∏"`);

    try {
      await showMyLocals(ctx, true);
      logger.log(`[Action: my_locals] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
    } catch (error) {
      logger.error(`[Action: my_locals] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
  bot.action('top_up', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.log(`[Action: top_up] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"`);

    try {
      await ctx.answerCbQuery('üí≥ –§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { show_alert: true });
      logger.log(`[Action: top_up] –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
    } catch (error) {
      logger.error(`[Action: top_up] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
  bot.action('back_to_main', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.log(`[Action: back_to_main] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"`);

    try {
      ctx.session.state = null;
      ctx.session.currentLocalId = null;
      logger.log(`[Action: back_to_main] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);

      await showMainMenu(ctx, false);
      logger.log(`[Action: back_to_main] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${telegramId}`);
    } catch (error) {
      logger.error(`[Action: back_to_main] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞–ª–∫–∏
  bot.action(/^local_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.log(`[Action: local_${localId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –≤—ã–±—Ä–∞–ª –ª–æ–∫–∞–ª–∫—É ID ${localId}`);

    try {
      ctx.session.currentLocalId = localId;
      logger.log(`[Action: local_${localId}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentLocalId: ${localId}`);

      await showLocalOverview(ctx, localId);
      logger.log(`[Action: local_${localId}] –û–±–∑–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
    } catch (error) {
      logger.error(`[Action: local_${localId}] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –õ–æ–∫–∞–ª–∫—É"
  bot.action('new_local', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.log(`[Action: new_local] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –õ–æ–∫–∞–ª–∫—É"`);

    try {
      ctx.session.state = 'awaiting_local_name';
      logger.log(`[Action: new_local] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: awaiting_local_name`);

      const messageText = `üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∫–∏**
      
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –°–æ–∑–¥–∞—Ç—å!", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –°–æ–∑–¥–∞—Ç—å!', 'generate_random_name')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')],
      ]);

      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      logger.log(`[Action: new_local] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∫–∏.`);
    } catch (error) {
      logger.error(`[Action: new_local] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏
  bot.action('generate_random_name', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.log(`[Action: generate_random_name] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${telegramId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å!" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏.`);

    try {
      const localName = haiku();
      logger.log(`[Action: generate_random_name] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏: "${localName}"`);

      await createLocal(ctx, localName, `üéâ –õ–æ–∫–∞–ª–∫–∞ "${localName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
      logger.log(`[Action: generate_random_name] –õ–æ–∫–∞–ª–∫–∞ "${localName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);

      ctx.session.state = null;
      logger.log(`[Action: generate_random_name] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${telegramId} —Å–±—Ä–æ—à–µ–Ω–æ.`);
    } catch (error) {
      logger.error(`[Action: generate_random_name] –û—à–∏–±–∫–∞: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏.');
    }
  });
}

module.exports = registerActions;
