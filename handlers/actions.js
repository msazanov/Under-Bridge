/**
 * File: handlers/actions.js
 * Description: Contains action handlers for Telegram bot inline keyboard callbacks.
 */

const { showMyLocals, showMainMenu, showLocalOverview } = require('../services/menu');
const { haiku } = require('../utils/name-generator');
const db = require('../repositories/db');
const logger = require('../utils/logger');
const { Markup } = require('telegraf');
const { createLocal, createLocalUser } = require('../services/localService');

function registerActions(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏
  bot.action(/^confirm_delete_local_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: confirm_delete_local_${localId}] User ID: ${telegramId} confirmed deletion of local ID ${localId}`);

    try {
      const user = await db.getUserByTelegramId(telegramId);
      if (!user) {
        logger.info(`[confirm_delete_local_${localId}] User ID ${telegramId} not found.`);
        await ctx.answerCbQuery('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', { show_alert: true });
        return;
      }

      await db.deleteLocal(localId, user.id);
      logger.info(`[confirm_delete_local_${localId}] Local ID ${localId} deleted.`);

      await ctx.editMessageText('üóëÔ∏è –õ–æ–∫–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', { parse_mode: 'Markdown' });
      logger.info(`[confirm_delete_local_${localId}] Deletion success message sent.`);

      await showMyLocals(ctx, true);
      logger.info(`[confirm_delete_local_${localId}] Updated list of locals sent.`);
    } catch (error) {
      logger.error(`[confirm_delete_local_${localId}] Error: ${error.message}`);
      const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É"
  bot.action(/^delete_local_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: delete_local_${localId}] User ID: ${telegramId} pressed "Delete Local" for local ID ${localId}`);

    try {
      const confirmationText = `üóëÔ∏è *–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏?* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_local_${localId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${localId}`)],
      ]);

      await ctx.editMessageText(confirmationText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      logger.info(`[Action: delete_local_${localId}] Confirmation message sent.`);
    } catch (error) {
      logger.error(`[Action: delete_local_${localId}] Error: ${error.message}`);
      const errorMessage = '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      await ctx.answerCbQuery(errorMessage, { show_alert: true });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  bot.action(/^add_user_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: add_user_${localId}] User ID: ${telegramId} pressed "Create User" for local ID ${localId}`);

    try {
      const local = await db.getLocalByIdAndOwner(localId, telegramId);
      if (!local) {
        logger.info(`[Action: add_user_${localId}] Local ID ${localId} not found or access denied for user ID ${telegramId}`);
        await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
        return;
      }

      ctx.session.state = 'awaiting_username';
      ctx.session.localId = localId;

      const messageText = `üë§ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
          
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'generate_random_username')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `user_settings_${localId}`)],
      ]);

      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      logger.info(`[Action: add_user_${localId}] Prompted for username input.`);
    } catch (error) {
      logger.error(`[Action: add_user_${localId}] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action('generate_random_username', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.info(`[Action: generate_random_username] User ID: ${telegramId} requested random username generation.`);

    try {
      const localId = ctx.session.localId;
      if (!localId) {
        throw new Error('Local ID not set in session.');
      }

      const username = haiku();
      logger.info(`[Action: generate_random_username] Generated username: ${username}`);

      await createLocalUser(ctx, username, `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
      logger.info(`[Action: generate_random_username] User "${username}" created successfully.`);

      ctx.session.state = null;
      ctx.session.localId = null;
    } catch (error) {
      logger.error(`[Action: generate_random_username] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –õ–æ–∫–∞–ª–∫–∏"
  bot.action('my_locals', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.info(`[Action: my_locals] User ID: ${telegramId} pressed "My Locals"`);

    try {
      await showMyLocals(ctx, true);
      logger.info(`[Action: my_locals] Main menu sent to user ID ${telegramId}`);
    } catch (error) {
      logger.error(`[Action: my_locals] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
  bot.action('top_up', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.info(`[Action: top_up] User ID: ${telegramId} pressed "Top Up"`);

    try {
      await ctx.answerCbQuery('üí≥ –§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { show_alert: true });
      logger.info(`[Action: top_up] Informed user about feature in development.`);
    } catch (error) {
      logger.error(`[Action: top_up] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  bot.action('back_to_main', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.info(`[Action: back_to_main] User ID: ${telegramId} pressed "Back"`);

    try {
      ctx.session.state = null;
      ctx.session.currentLocalId = null;
      logger.info(`[Action: back_to_main] Session state reset for user ID ${telegramId}`);

      await showMainMenu(ctx, false);
      logger.info(`[Action: back_to_main] Main menu sent to user ID ${telegramId}`);
    } catch (error) {
      logger.error(`[Action: back_to_main] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª–∫–∏
  bot.action(/^local_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: local_${localId}] User ID: ${telegramId} selected local ID ${localId}`);

    try {
      ctx.session.currentLocalId = localId;

      await showLocalOverview(ctx, localId);
      logger.info(`[Action: local_${localId}] Local overview sent.`);
    } catch (error) {
      logger.error(`[Action: local_${localId}] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –õ–æ–∫–∞–ª–∫—É"
  bot.action('new_local', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.info(`[Action: new_local] User ID: ${telegramId} pressed "Create Local"`);

    try {
      ctx.session.state = 'awaiting_local_name';

      const messageText = `üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∫–∏**
          
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –°–æ–∑–¥–∞—Ç—å!", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –°–æ–∑–¥–∞—Ç—å!', 'generate_random_name')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')],
      ]);

      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      logger.info(`[Action: new_local] Prompted for local name input.`);
    } catch (error) {
      logger.error(`[Action: new_local] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ª–æ–∫–∞–ª–∫–∏
  bot.action('generate_random_name', async (ctx) => {
    const telegramId = ctx.from.id;
    logger.info(`[Action: generate_random_name] User ID: ${telegramId} requested random local name generation.`);

    try {
      const localName = haiku();
      logger.info(`[Action: generate_random_name] Generated local name: "${localName}"`);

      await createLocal(ctx, localName, `üéâ –õ–æ–∫–∞–ª–∫–∞ "${localName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
      logger.info(`[Action: generate_random_name] Local "${localName}" created successfully.`);

      ctx.session.state = null;
    } catch (error) {
      logger.error(`[Action: generate_random_name] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∫–∏.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∫–∏"
  bot.action(/^local_settings_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: local_settings_${localId}] User ID: ${telegramId} opened local settings for local ID ${localId}`);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ª–æ–∫–∞–ª–∫–∏
      const local = await db.getLocalByIdAndOwner(localId, telegramId);
      if (!local) {
        logger.info(`[Action: local_settings_${localId}] Local ID ${localId} not found or access denied for user ID ${telegramId}`);
        await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
        return;
      }

      const messageText = `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∫–∏ "${local.name}"**`;

      const keyboard = Markup.inlineKeyboard([
        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –æ—Ç—Å—é–¥–∞
        [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∫—É', `delete_local_${local.id}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${local.id}`)],
      ]);

      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });

      logger.info(`[Action: local_settings_${localId}] Local settings menu displayed.`);
    } catch (error) {
      logger.error(`[Action: local_settings_${localId}] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
  bot.action(/^user_settings_(\d+)$/, async (ctx) => {
    const localId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: user_settings_${localId}] User ID: ${telegramId} opened user settings for local ID ${localId}`);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ª–æ–∫–∞–ª–∫–∏
      const local = await db.getLocalByIdAndOwner(localId, telegramId);
      if (!local) {
        logger.info(`[Action: user_settings_${localId}] Local ID ${localId} not found or access denied for user ID ${telegramId}`);
        await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
        return;
      }

      const localUsers = await db.getLocalUsers(localId);

      const messageText = `üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ª–æ–∫–∞–ª–∫–∏ "${local.name}"**

üîΩ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ:*`;

      const keyboardButtons = [];

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      localUsers.forEach((user) => {
        keyboardButtons.push([
          Markup.button.callback(`${user.username} (${user.ip_address})`, `user_${user.id}`),
        ]);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      keyboardButtons.push([
        Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', `add_user_${local.id}`),
      ]);

      keyboardButtons.push([
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', `local_${local.id}`),
      ]);

      const keyboard = Markup.inlineKeyboard(keyboardButtons);

      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });

      logger.info(`[Action: user_settings_${localId}] User settings menu displayed.`);
    } catch (error) {
      logger.error(`[Action: user_settings_${localId}] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.action(/^user_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: user_${userId}] User ID: ${telegramId} opened settings for user ID ${userId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ª–æ–∫–∞–ª–∫–∏
      const localUser = await db.getLocalUserById(userId);
      if (!localUser) {
        logger.info(`[Action: user_${userId}] Local user ID ${userId} not found.`);
        await ctx.answerCbQuery('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', { show_alert: true });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è
      const local = await db.getLocalByIdAndOwner(localUser.local_id, telegramId);
      if (!local) {
        logger.info(`[Action: user_${userId}] Local ID ${localUser.local_id} not found or access denied for user ID ${telegramId}`);
        await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
        return;
      }

      const messageText = `üë§ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${localUser.username}"**

üîΩ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', `rename_user_${userId}`)],
        [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', `delete_user_${userId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `user_settings_${local.id}`)],
      ]);

      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });

      logger.info(`[Action: user_${userId}] User settings displayed.`);
    } catch (error) {
      logger.error(`[Action: user_${userId}] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action(/^delete_user_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: delete_user_${userId}] User ID: ${telegramId} wants to delete user ID ${userId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ª–æ–∫–∞–ª–∫–∏
      const localUser = await db.getLocalUserById(userId);
      if (!localUser) {
        logger.info(`[Action: delete_user_${userId}] Local user ID ${userId} not found.`);
        await ctx.answerCbQuery('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', { show_alert: true });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const local = await db.getLocalByIdAndOwner(localUser.local_id, telegramId);
      if (!local) {
        logger.info(`[Action: delete_user_${userId}] Access denied for user ID ${telegramId}`);
        await ctx.answerCbQuery('‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.', { show_alert: true });
        return;
      }

      const confirmationText = `üóëÔ∏è *–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${localUser.username}"?* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_user_${userId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `user_${userId}`)],
      ]);

      await ctx.editMessageText(confirmationText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
      logger.info(`[Action: delete_user_${userId}] Confirmation message sent.`);
    } catch (error) {
      logger.error(`[Action: delete_user_${userId}] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action(/^confirm_delete_user_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: confirm_delete_user_${userId}] User ID: ${telegramId} confirmed deletion of user ID ${userId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ª–æ–∫–∞–ª–∫–∏
      const localUser = await db.getLocalUserById(userId);
      if (!localUser) {
        logger.info(`[Action: confirm_delete_user_${userId}] Local user ID ${userId} not found.`);
        await ctx.answerCbQuery('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', { show_alert: true });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è
      const local = await db.getLocalByIdAndOwner(localUser.local_id, telegramId);
      if (!local) {
        logger.info(`[Action: confirm_delete_user_${userId}] Local ID ${localUser.local_id} not found or access denied for user ID ${telegramId}`);
        await ctx.answerCbQuery('‚ùó –õ–æ–∫–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.', { show_alert: true });
        return;
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.deleteLocalUser(userId);
      logger.info(`[Action: confirm_delete_user_${userId}] User ID ${userId} deleted.`);

      await ctx.editMessageText('üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.', { parse_mode: 'Markdown' });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.', { show_alert: false });
      await showLocalOverview(ctx, local.id); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∫–∏
    } catch (error) {
      logger.error(`[Action: confirm_delete_user_${userId}] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action(/^rename_user_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    const telegramId = ctx.from.id;
    logger.info(`[Action: rename_user_${userId}] User ID: ${telegramId} wants to rename user ID ${userId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ª–æ–∫–∞–ª–∫–∏
      const localUser = await db.getLocalUserById(userId);
      if (!localUser) {
        logger.info(`[Action: rename_user_${userId}] Local user ID ${userId} not found.`);
        await ctx.answerCbQuery('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', { show_alert: true });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const local = await db.getLocalByIdAndOwner(localUser.local_id, telegramId);
      if (!local) {
        logger.info(`[Action: rename_user_${userId}] Access denied for user ID ${telegramId}`);
        await ctx.answerCbQuery('‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.', { show_alert: true });
        return;
      }

      ctx.session.state = 'awaiting_new_username';
      ctx.session.userIdToRename = userId;
      ctx.session.localId = local.id;

      const messageText = `‚úèÔ∏è **–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${localUser.username}"**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `user_${userId}`)],
      ]);

      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });

      logger.info(`[Action: rename_user_${userId}] Prompted for new username.`);
    } catch (error) {
      logger.error(`[Action: rename_user_${userId}] Error: ${error.message}`);
      await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}

module.exports = registerActions;
